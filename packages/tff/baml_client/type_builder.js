/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/
// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native';
import { TypeBuilder as _TypeBuilder, EnumBuilder, ClassBuilder } from '@boundaryml/baml/type_builder';
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals";
export { FieldType, EnumBuilder, ClassBuilder };
export default class TypeBuilder {
    tb;
    BookTrip;
    CalculateSavingsGoal;
    CoordinatorDone;
    CoordinatorRespond;
    CreateShoppingList;
    Done;
    FinanceDone;
    FinanceRespond;
    GetBudgetSummary;
    GetInvestmentInfo;
    GetNutrition;
    GetWeather;
    InvokeFinanceAgent;
    InvokeRecipeAgent;
    InvokeTravelAgent;
    PlanMeal;
    RecipeDone;
    RecipeRespond;
    RespondToUser;
    SearchFlights;
    SearchHotels;
    SearchRecipes;
    TrackExpense;
    constructor() {
        this.tb = new _TypeBuilder({
            classes: new Set([
                "BookTrip", "CalculateSavingsGoal", "CoordinatorDone", "CoordinatorRespond", "CreateShoppingList", "Done", "FinanceDone", "FinanceRespond", "GetBudgetSummary", "GetInvestmentInfo", "GetNutrition", "GetWeather", "InvokeFinanceAgent", "InvokeRecipeAgent", "InvokeTravelAgent", "PlanMeal", "RecipeDone", "RecipeRespond", "RespondToUser", "SearchFlights", "SearchHotels", "SearchRecipes", "TrackExpense",
            ]),
            enums: new Set([]),
            runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        this.BookTrip = this.tb.classViewer("BookTrip", [
            "intent", "destination", "startDate", "endDate",
        ]);
        this.CalculateSavingsGoal = this.tb.classViewer("CalculateSavingsGoal", [
            "intent", "targetAmount", "currentSavings", "monthlyContribution",
        ]);
        this.CoordinatorDone = this.tb.classViewer("CoordinatorDone", [
            "intent", "message",
        ]);
        this.CoordinatorRespond = this.tb.classViewer("CoordinatorRespond", [
            "intent", "message",
        ]);
        this.CreateShoppingList = this.tb.classViewer("CreateShoppingList", [
            "intent", "recipes",
        ]);
        this.Done = this.tb.classViewer("Done", [
            "intent", "message",
        ]);
        this.FinanceDone = this.tb.classViewer("FinanceDone", [
            "intent", "message",
        ]);
        this.FinanceRespond = this.tb.classViewer("FinanceRespond", [
            "intent", "message",
        ]);
        this.GetBudgetSummary = this.tb.classViewer("GetBudgetSummary", [
            "intent", "period",
        ]);
        this.GetInvestmentInfo = this.tb.classViewer("GetInvestmentInfo", [
            "intent", "symbol",
        ]);
        this.GetNutrition = this.tb.classViewer("GetNutrition", [
            "intent", "ingredient",
        ]);
        this.GetWeather = this.tb.classViewer("GetWeather", [
            "intent", "city",
        ]);
        this.InvokeFinanceAgent = this.tb.classViewer("InvokeFinanceAgent", [
            "intent", "query",
        ]);
        this.InvokeRecipeAgent = this.tb.classViewer("InvokeRecipeAgent", [
            "intent", "query",
        ]);
        this.InvokeTravelAgent = this.tb.classViewer("InvokeTravelAgent", [
            "intent", "query",
        ]);
        this.PlanMeal = this.tb.classViewer("PlanMeal", [
            "intent", "mealType", "preferences",
        ]);
        this.RecipeDone = this.tb.classViewer("RecipeDone", [
            "intent", "message",
        ]);
        this.RecipeRespond = this.tb.classViewer("RecipeRespond", [
            "intent", "message",
        ]);
        this.RespondToUser = this.tb.classViewer("RespondToUser", [
            "intent", "message",
        ]);
        this.SearchFlights = this.tb.classViewer("SearchFlights", [
            "intent", "from", "to", "date",
        ]);
        this.SearchHotels = this.tb.classViewer("SearchHotels", [
            "intent", "city", "checkIn", "checkOut",
        ]);
        this.SearchRecipes = this.tb.classViewer("SearchRecipes", [
            "intent", "ingredients", "dietary",
        ]);
        this.TrackExpense = this.tb.classViewer("TrackExpense", [
            "intent", "category", "amount", "description",
        ]);
    }
    reset() {
        this.tb.reset();
        // TODO: This should happen in Rust. Problem is, when we construct the
        // typebuilder we instantiate class builders once and it seems to make
        // a JS copy, bypassing the Rust side? In Python however, every time we
        // access a class builder with @property, we get a new instance that
        // wraps over the Rust type builder, so we only need to call tb.reset().
        // In JS it's not possible unless we refactor the way class builders are
        // accessed.
    }
    __tb() {
        return this.tb._tb();
    }
    string() {
        return this.tb.string();
    }
    literalString(value) {
        return this.tb.literalString(value);
    }
    literalInt(value) {
        return this.tb.literalInt(value);
    }
    literalBool(value) {
        return this.tb.literalBool(value);
    }
    int() {
        return this.tb.int();
    }
    float() {
        return this.tb.float();
    }
    bool() {
        return this.tb.bool();
    }
    list(type) {
        return this.tb.list(type);
    }
    null() {
        return this.tb.null();
    }
    map(key, value) {
        return this.tb.map(key, value);
    }
    union(types) {
        return this.tb.union(types);
    }
    addClass(name) {
        return this.tb.addClass(name);
    }
    addEnum(name) {
        return this.tb.addEnum(name);
    }
    addBaml(baml) {
        this.tb.addBaml(baml);
    }
}
