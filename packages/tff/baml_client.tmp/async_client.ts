/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog,
HTTPRequest } from "@boundaryml/baml"
import { toBamlError, BamlStream, BamlAbortError, Collector } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {BookTrip, CalculateSavingsGoal, CoordinatorDone, CoordinatorRespond, CreateShoppingList, Done, FinanceDone, FinanceRespond, GetBudgetSummary, GetInvestmentInfo, GetNutrition, GetWeather, InvokeFinanceAgent, InvokeRecipeAgent, InvokeTravelAgent, PlanMeal, RecipeDone, RecipeRespond, RespondToUser, SearchFlights, SearchHotels, SearchRecipes, TrackExpense} from "./types"
import type TypeBuilder from "./type_builder"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
* @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
*/
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

    type TickReason = "Unknown";

    type BamlCallOptions = {
    tb?: TypeBuilder
    clientRegistry?: ClientRegistry
    collector?: Collector | Collector[]
    env?: Record<string, string | undefined>
      tags?: Record<string, string>
        signal?: AbortSignal
        onTick?: (reason: TickReason, log: FunctionLog | null) => void
        }

        export class BamlAsyncClient {
        private runtime: BamlRuntime
        private ctxManager: BamlCtxManager
        private streamClient: BamlStreamClient
        private httpRequest: AsyncHttpRequest
        private httpStreamRequest: AsyncHttpStreamRequest
        private llmResponseParser: LlmResponseParser
        private llmStreamParser: LlmStreamParser
        private bamlOptions: BamlCallOptions

        constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
        this.runtime = runtime
        this.ctxManager = ctxManager
        this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
        this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
        this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
        this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
        this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
        this.bamlOptions = bamlOptions || {}
        }

        withOptions(bamlOptions: BamlCallOptions) {
        return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
        }

        get stream() {
        return this.streamClient
        }

        get request() {
        return this.httpRequest
        }

        get streamRequest() {
        return this.httpStreamRequest
        }

        get parse() {
        return this.llmResponseParser
        }

        get parseStream() {
        return this.llmStreamParser
        }

        
        async FinanceAgent(
        context: string,
        __baml_options__?: BamlCallOptions
        ): Promise<types.TrackExpense | types.GetBudgetSummary | types.GetInvestmentInfo | types.CalculateSavingsGoal | types.FinanceRespond | types.FinanceDone> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.FinanceAgent(
          context,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "FinanceAgent",
            {
            "context": context
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            )
            return raw.parsed(false) as types.TrackExpense | types.GetBudgetSummary | types.GetInvestmentInfo | types.CalculateSavingsGoal | types.FinanceRespond | types.FinanceDone
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async MainCoordinator(
        context: string,
        __baml_options__?: BamlCallOptions
        ): Promise<types.InvokeTravelAgent | types.InvokeRecipeAgent | types.InvokeFinanceAgent | types.CoordinatorRespond | types.CoordinatorDone> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.MainCoordinator(
          context,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "MainCoordinator",
            {
            "context": context
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            )
            return raw.parsed(false) as types.InvokeTravelAgent | types.InvokeRecipeAgent | types.InvokeFinanceAgent | types.CoordinatorRespond | types.CoordinatorDone
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async RecipeAgent(
        context: string,
        __baml_options__?: BamlCallOptions
        ): Promise<types.SearchRecipes | types.GetNutrition | types.PlanMeal | types.CreateShoppingList | types.RecipeRespond | types.RecipeDone> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.RecipeAgent(
          context,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "RecipeAgent",
            {
            "context": context
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            )
            return raw.parsed(false) as types.SearchRecipes | types.GetNutrition | types.PlanMeal | types.CreateShoppingList | types.RecipeRespond | types.RecipeDone
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TravelAgent(
        context: string,
        __baml_options__?: BamlCallOptions
        ): Promise<types.GetWeather | types.SearchFlights | types.SearchHotels | types.BookTrip | types.RespondToUser | types.Done> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TravelAgent(
          context,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TravelAgent",
            {
            "context": context
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            )
            return raw.parsed(false) as types.GetWeather | types.SearchFlights | types.SearchHotels | types.BookTrip | types.RespondToUser | types.Done
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
            }

            class BamlStreamClient {
            private runtime: BamlRuntime
            private ctxManager: BamlCtxManager
            private bamlOptions: BamlCallOptions

            constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
            this.runtime = runtime
            this.ctxManager = ctxManager
            this.bamlOptions = bamlOptions || {}
            }

            
            FinanceAgent(
            context: string,
            __baml_options__?: BamlCallOptions
            ): BamlStream<partial_types.TrackExpense | partial_types.GetBudgetSummary | partial_types.GetInvestmentInfo | partial_types.CalculateSavingsGoal | partial_types.FinanceRespond | partial_types.FinanceDone, types.TrackExpense | types.GetBudgetSummary | types.GetInvestmentInfo | types.CalculateSavingsGoal | types.FinanceRespond | types.FinanceDone>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for FinanceAgent", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "FinanceAgent",
                {
                "context": context
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.TrackExpense | partial_types.GetBudgetSummary | partial_types.GetInvestmentInfo | partial_types.CalculateSavingsGoal | partial_types.FinanceRespond | partial_types.FinanceDone, types.TrackExpense | types.GetBudgetSummary | types.GetInvestmentInfo | types.CalculateSavingsGoal | types.FinanceRespond | types.FinanceDone>(
                  raw,
                  (a): partial_types.TrackExpense | partial_types.GetBudgetSummary | partial_types.GetInvestmentInfo | partial_types.CalculateSavingsGoal | partial_types.FinanceRespond | partial_types.FinanceDone => a,
                  (a): types.TrackExpense | types.GetBudgetSummary | types.GetInvestmentInfo | types.CalculateSavingsGoal | types.FinanceRespond | types.FinanceDone => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            MainCoordinator(
            context: string,
            __baml_options__?: BamlCallOptions
            ): BamlStream<partial_types.InvokeTravelAgent | partial_types.InvokeRecipeAgent | partial_types.InvokeFinanceAgent | partial_types.CoordinatorRespond | partial_types.CoordinatorDone, types.InvokeTravelAgent | types.InvokeRecipeAgent | types.InvokeFinanceAgent | types.CoordinatorRespond | types.CoordinatorDone>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for MainCoordinator", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "MainCoordinator",
                {
                "context": context
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.InvokeTravelAgent | partial_types.InvokeRecipeAgent | partial_types.InvokeFinanceAgent | partial_types.CoordinatorRespond | partial_types.CoordinatorDone, types.InvokeTravelAgent | types.InvokeRecipeAgent | types.InvokeFinanceAgent | types.CoordinatorRespond | types.CoordinatorDone>(
                  raw,
                  (a): partial_types.InvokeTravelAgent | partial_types.InvokeRecipeAgent | partial_types.InvokeFinanceAgent | partial_types.CoordinatorRespond | partial_types.CoordinatorDone => a,
                  (a): types.InvokeTravelAgent | types.InvokeRecipeAgent | types.InvokeFinanceAgent | types.CoordinatorRespond | types.CoordinatorDone => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            RecipeAgent(
            context: string,
            __baml_options__?: BamlCallOptions
            ): BamlStream<partial_types.SearchRecipes | partial_types.GetNutrition | partial_types.PlanMeal | partial_types.CreateShoppingList | partial_types.RecipeRespond | partial_types.RecipeDone, types.SearchRecipes | types.GetNutrition | types.PlanMeal | types.CreateShoppingList | types.RecipeRespond | types.RecipeDone>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for RecipeAgent", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "RecipeAgent",
                {
                "context": context
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.SearchRecipes | partial_types.GetNutrition | partial_types.PlanMeal | partial_types.CreateShoppingList | partial_types.RecipeRespond | partial_types.RecipeDone, types.SearchRecipes | types.GetNutrition | types.PlanMeal | types.CreateShoppingList | types.RecipeRespond | types.RecipeDone>(
                  raw,
                  (a): partial_types.SearchRecipes | partial_types.GetNutrition | partial_types.PlanMeal | partial_types.CreateShoppingList | partial_types.RecipeRespond | partial_types.RecipeDone => a,
                  (a): types.SearchRecipes | types.GetNutrition | types.PlanMeal | types.CreateShoppingList | types.RecipeRespond | types.RecipeDone => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TravelAgent(
            context: string,
            __baml_options__?: BamlCallOptions
            ): BamlStream<partial_types.GetWeather | partial_types.SearchFlights | partial_types.SearchHotels | partial_types.BookTrip | partial_types.RespondToUser | partial_types.Done, types.GetWeather | types.SearchFlights | types.SearchHotels | types.BookTrip | types.RespondToUser | types.Done>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TravelAgent", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TravelAgent",
                {
                "context": context
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.GetWeather | partial_types.SearchFlights | partial_types.SearchHotels | partial_types.BookTrip | partial_types.RespondToUser | partial_types.Done, types.GetWeather | types.SearchFlights | types.SearchHotels | types.BookTrip | types.RespondToUser | types.Done>(
                  raw,
                  (a): partial_types.GetWeather | partial_types.SearchFlights | partial_types.SearchHotels | partial_types.BookTrip | partial_types.RespondToUser | partial_types.Done => a,
                  (a): types.GetWeather | types.SearchFlights | types.SearchHotels | types.BookTrip | types.RespondToUser | types.Done => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
                  }

                  export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
                  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)