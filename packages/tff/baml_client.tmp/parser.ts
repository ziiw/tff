/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {BookTrip, CalculateSavingsGoal, CoordinatorDone, CoordinatorRespond, CreateShoppingList, Done, FinanceDone, FinanceRespond, GetBudgetSummary, GetInvestmentInfo, GetNutrition, GetWeather, InvokeFinanceAgent, InvokeRecipeAgent, InvokeTravelAgent, PlanMeal, RecipeDone, RecipeRespond, RespondToUser, SearchFlights, SearchHotels, SearchRecipes, TrackExpense} from "./types"
import type TypeBuilder from "./type_builder"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  FinanceAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): types.TrackExpense | types.GetBudgetSummary | types.GetInvestmentInfo | types.CalculateSavingsGoal | types.FinanceRespond | types.FinanceDone {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "FinanceAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as types.TrackExpense | types.GetBudgetSummary | types.GetInvestmentInfo | types.CalculateSavingsGoal | types.FinanceRespond | types.FinanceDone
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MainCoordinator(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): types.InvokeTravelAgent | types.InvokeRecipeAgent | types.InvokeFinanceAgent | types.CoordinatorRespond | types.CoordinatorDone {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "MainCoordinator",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as types.InvokeTravelAgent | types.InvokeRecipeAgent | types.InvokeFinanceAgent | types.CoordinatorRespond | types.CoordinatorDone
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RecipeAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): types.SearchRecipes | types.GetNutrition | types.PlanMeal | types.CreateShoppingList | types.RecipeRespond | types.RecipeDone {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "RecipeAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as types.SearchRecipes | types.GetNutrition | types.PlanMeal | types.CreateShoppingList | types.RecipeRespond | types.RecipeDone
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TravelAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): types.GetWeather | types.SearchFlights | types.SearchHotels | types.BookTrip | types.RespondToUser | types.Done {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "TravelAgent",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as types.GetWeather | types.SearchFlights | types.SearchHotels | types.BookTrip | types.RespondToUser | types.Done
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  FinanceAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): partial_types.TrackExpense | partial_types.GetBudgetSummary | partial_types.GetInvestmentInfo | partial_types.CalculateSavingsGoal | partial_types.FinanceRespond | partial_types.FinanceDone {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "FinanceAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as partial_types.TrackExpense | partial_types.GetBudgetSummary | partial_types.GetInvestmentInfo | partial_types.CalculateSavingsGoal | partial_types.FinanceRespond | partial_types.FinanceDone
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MainCoordinator(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): partial_types.InvokeTravelAgent | partial_types.InvokeRecipeAgent | partial_types.InvokeFinanceAgent | partial_types.CoordinatorRespond | partial_types.CoordinatorDone {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "MainCoordinator",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as partial_types.InvokeTravelAgent | partial_types.InvokeRecipeAgent | partial_types.InvokeFinanceAgent | partial_types.CoordinatorRespond | partial_types.CoordinatorDone
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RecipeAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): partial_types.SearchRecipes | partial_types.GetNutrition | partial_types.PlanMeal | partial_types.CreateShoppingList | partial_types.RecipeRespond | partial_types.RecipeDone {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "RecipeAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as partial_types.SearchRecipes | partial_types.GetNutrition | partial_types.PlanMeal | partial_types.CreateShoppingList | partial_types.RecipeRespond | partial_types.RecipeDone
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TravelAgent(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, env?: Record<string, string | undefined> }
  ): partial_types.GetWeather | partial_types.SearchFlights | partial_types.SearchHotels | partial_types.BookTrip | partial_types.RespondToUser | partial_types.Done {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.parseLlmResponse(
        "TravelAgent",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as partial_types.GetWeather | partial_types.SearchFlights | partial_types.SearchHotels | partial_types.BookTrip | partial_types.RespondToUser | partial_types.Done
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}